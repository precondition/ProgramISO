default partial alphanumeric_keys modifier_keys
xkb_symbols "basic" {
    // Using altgr-intl over basic us just in case I missed to specify 
    // the 3rd level keysyms for a key causing AutoKey to act weird.
    include "us(altgr-intl)"
    name[Group1]= "ProgramISO";
    
    // Numbers/Backspace row ---------------------------------------------
    replace key <TLDE> { [ Hyper_L ] };
    modifier_map Mod3 { <TLDE> };
    key <AE01> { [          1,     exclam,       agrave,       Agrave ] };
    key <AE02> { [          2,         at,       eacute,       Eacute ] };
    key <AE03> { [          3, numbersign,       egrave,       Egrave ] };
    key <AE04> { [          4,     dollar,  ecircumflex,  Ecircumflex ] };
    key <AE05> { [          5,    percent,     ccedilla,     Ccedilla ] };
    key <AE07> { [          7,  ampersand,       ugrave,       Ugrave ] };
    key <AE08> { [          8,   asterisk,  ucircumflex,  Ucircumflex ] };
    key <AE09> { [          9,  parenleft,  icircumflex,  Icircumflex ] };
    key <AE10> { [          0, parenright,  ocircumflex,  Ocircumflex ] };
    replace key <AE11> { [ Hyper_R ] };
    modifier_map Mod3 { <AE11> };
    key <AE12> { [bracketright,enfilledcircbullet,guillemotright,equal] };

    // Tab row -----------------------------------------------------------
    key <TAB>  { [ISO_Level3_Shift,ISO_Level3_Shift,ISO_Level3_Shift,ISO_Left_Tab] };
    key <AD01> { [          q,          Q,       exclam,   VoidSymbol ] };
    key <AD02> { [          w,          W,           at,   VoidSymbol ] };
    key <AD03> { [          e,          E,   numbersign,   VoidSymbol ] };
    key <AD04> { [          r,          R,       dollar,   VoidSymbol ] };
    key <AD05> { [          t,          T,      percent,   VoidSymbol ] };
    key <AD06> { [          y,          Y,  asciicircum,   VoidSymbol ] };
    key <AD07> { [          u,          U,    ampersand,   VoidSymbol ] };
    key <AD08> { [          i,          I,     asterisk,   VoidSymbol ] };
    key <AD09> { [          o,          O,        equal,   VoidSymbol ] };
    key <AD10> { [          p,          P,         plus,   VoidSymbol ] };
    key <AD11> { [  BackSpace,  BackSpace,   VoidSymbol,    BackSpace ] };
    key <AD12> { [     Delete,     Delete,       Insert,       Insert ] };

    // Caps Lock row -----------------------------------------------------                        
    key <CAPS> { [     Escape,     Escape,        colon,    semicolon ] };
    key <AC01> { [          a,          A,         Home,         Home ] };
    key <AC02> { [          s,          S,         Next,         Next ] };
    key <AC03> { [          d,          D,        Prior,        Prior ] };
    key <AC04> { [          f,          F,          End,          End ] };
    key <AC05> { [          g,          G,     XF86AudioRaiseVolume,G ] };
    key <AC06> { [	        h,          H,         Left,         Left ] };
    key <AC07> { [	        j,          J,         Down,         Down ] };
    key <AC08> { [	        k,          K,           Up,           Up ] };
    key <AC09> { [	        l,          L,        Right,        Right ] };
    key <AC10> { [  Control_R,  Control_R,    Control_R,    Control_R ] };
    key <AC11> { [ apostrophe,	 quotedbl,	      grave,        grave ]	};
    key <AC12> { [  semicolon,      colon,        grave,        grave ] };

    // Shift row ---------------------------------------------------------
    // ISO's "splitted" left shift now acts as 
    // control for the left half and shift for the right half.
    replace key <LFSH> { [  Control_L ] };
    replace key <LSGT> { [  Shift_L,    Shift_L,    Shift_L,   Shift_L  ] };
    modifier_map shift { <LSGT> };
    modifier_map Control { <LFSH> };

    key <AB01> { [	        z,          Z,            z,            Z ]	};
    key <AB02> { [	        x,          X,            x,            X ]	};
    key <AB03> { [	        c,          C,            c,            C ]	};
    key <AB04> { [          v,          V, XF86AudioLowerVolume,    V ] };
    key <AB05> { [	        b,	        B,            b,	        B ]	};
    key <AB06> { [	        n,	        N,  bracketleft,	        N ]	};
    key <AB07> { [	        m,	        M, bracketright,	        M ]	};
    key <AB08> { [      comma,       less,    braceleft,    braceleft ] };
    key <AB09> { [     period,    greater,   braceright,   braceright ] };
    
    // Right shift is moved closer to the fingers and,
    // original right shift becomes a compose key.
    key <AB10> { [    Shift_R,    Shift_R,      Shift_R,      Shift_R ] };
    key <RTSH> { type[Group1]="TWO_LEVEL",     [ Multi_key, Multi_key ] };

    // Space bar row -----------------------------------------------------
    // Turn the physical left control key into an additional modifier, 
    // thus unlocking a whole new layer of possible keyboard shortcuts.
    replace key <LCTL> { [ Hyper_L ] };
    modifier_map Mod3 { <LCTL> };

    // AltGr (or right Alt) temporarily switches to level 3 for the next key.
    // Double-tap AltGr to lock Level3,  double-tap again to unlock level3
    key <RALT> { type[Group1]="ONE_LEVEL", symbols[Group1] = [ ISO_Level3_Latch ] };
    include "level3(modifier_mapping)"

    key <SPCE> { [      space,      minus,   underscore,        space ] };
    
    // Spare keys for xcape to grab --------------------------------------
    // For key <TLDE>
    key <I221> { [      grave, asciitilde,  acircumflex,  Acircumflex ] };
    // For key <AE11>
    key <I247> { [bracketleft,     degree,guillemotleft,        minus ] };
    // For key <AB10>
    key <FK24> { [      slash,    question,       slash,     question ] };
    // For key <LSGT>
    key <FK19> { [  backslash,         bar,    NoSymbol,   NoSymbol   ] };
    // For key <TAB>
    key <I168> { [        Tab,ISO_Left_Tab,  asciitilde, ISO_Left_Tab ] };
    // For key <AC10>
    key <RTRN> { [ Return,  Return,     semicolon,  Return		]	};
};
